AWSTemplateFormatVersion: '2010-09-09'
Description: Quarkus + Postgres on one t4g.small (ARM) managed entirely by CloudFormation

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC where the instance will live
  SubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet (public or private with outbound NAT GW)
  AllowedCidr:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR that may reach the API port (8080). Change to your office IP for dev.

Resources:
  #––– IAM –––––––––––––––––––––––––––––––––––––––––––––––––––
  QuarkusHostRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: { Service: ec2.amazonaws.com }
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
      Path: /

  QuarkusProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles: [ !Ref QuarkusHostRole ]

  #––– Security group ––––––––––––––––––––––––––––––––––––––––
  ApiSg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Ingress for Quarkus API
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080         # change to 80/443 if you front‑end with ALB/Nginx
          ToPort: 8080
          CidrIp: !Ref AllowedCidr

  #––– EC2 ––––––––––––––––––––––––––––––––––––––––––––––––––––
  QuarkusHost:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t4g.small
      SubnetId: !Ref SubnetId
      SecurityGroupIds: [ !Ref ApiSg ]
      IamInstanceProfile: !Ref QuarkusProfile
      BlockDeviceMappings:
        # root
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: 8, VolumeType: gp3, Encrypted: true }
        # Postgres
        - DeviceName: /dev/xvdb
          Ebs: { VolumeSize: 5, VolumeType: gp3, Encrypted: true, DeleteOnTermination: false }
      ImageId: !Sub "{{resolve:ssm:/aws/service/canonical/ubuntu/server/22.04/stable/current/arm64/hvm/ebs-gp2/ami-id}}"
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash
          set -euxo pipefail
          apt-get update -y
          apt-get install -y ca-certificates curl gnupg
          install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg \
          | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          chmod a+r /etc/apt/keyrings/docker.gpg
          echo \
          "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] \
            https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
          > /etc/apt/sources.list.d/docker.list
      
          apt-get update -y
          apt-get install -y docker-ce docker-ce-cli containerd.io \
          docker-buildx-plugin docker-compose-plugin awscli amazon-ecr-credential-helper
          usermod -aG docker ubuntu
          systemctl enable docker
          
          helper_ver=0.9.1
          curl -fsSL -o /usr/local/bin/docker-credential-ecr-login \
            "https://amazon-ecr-credential-helper-releases.s3.us-east-2.amazonaws.com/${helper_ver}/linux-arm64/docker-credential-ecr-login"
          chmod +x /usr/local/bin/docker-credential-ecr-login
          ln -s /usr/local/bin/docker-credential-ecr-login /usr/bin/docker-credential-ecr-login
          
          mkdir -p /root/.docker
          cat >/root/.docker/config.json <<'EOF'
          {
            "credHelpers": {
              "227370404427.dkr.ecr.us-east-1.amazonaws.com": "ecr-login"
            }
          }
          EOC
          
          systemctl restart docker

          # Mount the second EBS volume at /dbdata (if you kept it)
          mkfs -t xfs /dev/xvdb || true
          mkdir -p /dbdata
          echo '/dev/xvdb /dbdata xfs defaults,nofail 0 2' >> /etc/fstab
          mount -a

          # Compose stack
          mkdir -p /opt/quarkus
          cat >/opt/quarkus/docker-compose.yml <<'EOF'
          version: "3.9"
          services:
            db:
              image: postgres:16-alpine
              restart: unless-stopped
              environment:
                POSTGRES_PASSWORD: dbpass
              volumes:
                - /dbdata:/var/lib/postgresql/data     # persistent EBS
            app:
              image: 227370404427.dkr.ecr.us-east-1.amazonaws.com/habit/content-api:latest
              restart: unless-stopped
              ports:
                - "8080:8080"
              environment:
                QUARKUS_DATASOURCE_JDBC_URL: jdbc:postgresql://db:5432/postgres
                QUARKUS_DATASOURCE_USERNAME: postgres
                QUARKUS_DATASOURCE_PASSWORD: dbpass
                QUARKUS_HTTP_CORS_ORIGINS: http://localhost:8080,http://localhost:8081,http://localhost:8082
          EOF

          cat >/etc/systemd/system/quarkus-compose.service <<'EOF'
          [Unit]
          Description=Quarkus+Postgres stack
          After=docker.service
          Requires=docker.service
          [Service]
          Type=oneshot
          WorkingDirectory=/opt/quarkus
          ExecStart=/usr/bin/docker compose up -d
          ExecStop=/usr/bin/docker compose down
          RemainAfterExit=yes
          [Install]
          WantedBy=multi-user.target
          EOF

          systemctl daemon-reload
          systemctl enable quarkus-compose
          systemctl start  quarkus-compose
